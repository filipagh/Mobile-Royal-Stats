buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.swagger:swagger-codegen:2.4.1")
    }
}

apply plugin: 'base'

group = 'com.ezrs.api'

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'com.ezrs.api'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.fork = true

    /* Setting the build directory of the subproject
       to user-service-contract/build/[projectName]
     */
    project.buildDir = "${rootProject.buildDir}/${project.name}"

    // Source folder is now different as the build directory is set to a custom path
    sourceSets {
        main {
            kotlin {
                srcDir "${project.buildDir}/src/main/kotlin" as Closure
            }
        }
    }

    // This is just for generating the source jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
}

//ext.appName      = 'user-service'
//ext.apiPackage   = 'com.arnoldgalovics.blog.userservice.api'
//ext.modelPackage = 'com.arnoldgalovics.blog.userservice.model'
//ext.swaggerFile  = "${rootDir}/api/swagger.yml"

project(":app") { // user-service-server
    // Actual task for generating the server
    task generateServer {
        doFirst {
            def f = new File('api/swagger.json')
            new URL('http://localhost:8080/Mobile_Royal_Stats_Server_war_exploded/rest/apiee/swagger.json').withInputStream{ i -> f.withOutputStream{ it << i }}
        }
        doLast {
            def config = new CodegenConfigurator()
            config.setLang("kotlin")
            config.setApiPackage("com.ezrs.api.generated")            // Package to be used for the API interfaces
            config.setModelPackage("com.ezrs.api.generated.model")        // Package to be used for the API models
            config.setInputSpec("api/swagger.json") // The swagger API file
            config.setOutputDir("api/generated")        // The output directory, user-service-contract/build/user-service-server/
            config.setAdditionalProperties([
                    'dateLibrary'     : 'kotlin', // Date library to use
                    'useTags'         : 'true',  // Use tags for the naming
                    'interfaceOnly'   : 'true'   // Generating the Controller API interface and the models only
            ])
            new DefaultGenerator().opts(config.toClientOptInput()).generate() // Executing the generation
        }
    }

    /* Defining the order of the tasks and the dependency between them.
       As this is a Java project, it will execute the generateServer task first,
       then the compilation of the generated files.
     */
//    compileJava.dependsOn('generateServer')
}